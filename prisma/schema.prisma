generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  passwordHash  String?
  refCode       String   @unique
  referrerId    String? // two-level affiliate: parent
  referrer      User?    @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals     User[]   @relation("UserReferrals")
  walletAddress String?
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  subscriptions Subscription[]
  commissions   Commission[] @relation("CommissionBeneficiary") // commissions earned
  originatedCommissions Commission[] @relation("CommissionFromUser") // commissions generated from this user's purchases
  withdrawals   Withdrawal[]
  otpCodes      OtpCode[]
}

model Plan {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  priceEth     Decimal  // price in ETH (as decimal string)
  durationDays Int      // subscription duration
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  subscriptions Subscription[]
}

model Subscription {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  plan       Plan     @relation(fields: [planId], references: [id])
  planId     String
  txHash     String   @unique
  amountEth  Decimal
  startsAt   DateTime @default(now())
  endsAt     DateTime
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
}

model Commission {
  id          String   @id @default(cuid())
  beneficiary User     @relation("CommissionBeneficiary", fields: [beneficiaryId], references: [id])
  beneficiaryId String
  fromUser    User     @relation("CommissionFromUser", fields: [fromUserId], references: [id])
  fromUserId  String
  level       Int      // 1 or 2
  amountEth   Decimal
  status      String  @default("PENDING")
  createdAt   DateTime @default(now())
  paidAt      DateTime?
  txHash      String?
}

model Withdrawal {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  toAddress   String
  amountEth   Decimal
  status      String @default("REQUESTED")
  createdAt   DateTime @default(now())
  txHash      String?
  processedAt DateTime?
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model OtpCode {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  code      String
  purpose   String // "signup" | "login"
  expiresAt DateTime
  consumed  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, purpose, consumed])
}
